/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./public/models/heart.glb -o src/components/Heart.jsx 
Heart by Quaternius (https://poly.pizza/m/1yCRUwFnwX)
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useScroll } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Group } from 'three'
import * as THREE from 'three'
import { useFrame } from '@react-three/fiber'
import PropTypes from 'prop-types';

export type DreiGLTF = GLTF & {
  nodes: Record<string, THREE.Mesh>;
  materials: Record<string, THREE.MeshStandardMaterial>;
};
interface CustomMesh extends THREE.Mesh {
  originalPosition: THREE.Vector3
  directionVector: THREE.Vector3
  targetPosition: THREE.Vector3
}
interface HeartProps {
  scale: number;
  // other props if any
}
const Heart:React.FC<HeartProps> = (props: JSX.IntrinsicElements['group'],scale) => {
  const { nodes, materials } = useGLTF('/models/heart.glb') as DreiGLTF
  const group = useRef<Group | null>(null)
  Heart.propTypes = {
    scale: PropTypes.number.isRequired,
  };
  useEffect(() => {
    const groupWorldPosition = new THREE.Vector3()
    group.current?.getWorldPosition(groupWorldPosition)

    group.current?.children.forEach((mesh)=>{
      const customMesh = mesh as CustomMesh;

      customMesh.originalPosition = mesh.position.clone()
      const meshWorldPosition = new THREE.Vector3()
      mesh.getWorldPosition(meshWorldPosition)

      customMesh.directionVector = meshWorldPosition.clone().sub(groupWorldPosition).normalize()
      customMesh.targetPosition = customMesh.originalPosition.clone().add(customMesh.directionVector.clone().multiplyScalar(3))
    })
  })

  const scrollData = useScroll()
  useFrame(()=>{
    group.current?.children.forEach((mesh) => {
      if( scrollData.offset < 0.0001){
        if (mesh.name === "origin"){
          mesh.visible = true
        } else {
          mesh.visible = false
        } 
      } else {
        if (mesh.name === "origin"){
          mesh.visible = false
        } else {
          mesh.visible = true
        } 
      }

      const customMesh = mesh as CustomMesh;
      customMesh.position.x = THREE.MathUtils.lerp(
        customMesh.originalPosition.x,
        customMesh.targetPosition.x,
        scrollData.offset
      )
      customMesh.position.y = THREE.MathUtils.lerp(
        customMesh.originalPosition.y,
        customMesh.targetPosition.y,
        scrollData.offset
      )
      customMesh.position.z = THREE.MathUtils.lerp(
        customMesh.originalPosition.z,
        customMesh.targetPosition.z,
        scrollData.offset
      )
    })
  })
  return (
    <group {...props} dispose={null} ref={group}>
      <mesh geometry={nodes.Heart_Full_cell001.geometry} material={materials.Red} position={[-0.878, -0.706, -0.238]} />
      <mesh geometry={nodes.Heart_Full_cell002.geometry} material={materials.Red} position={[-0.525, -0.151, -0.633]} />
      <mesh geometry={nodes.Heart_Full_cell003.geometry} material={materials.Red} position={[-0.54, -0.04, -0.025]} />
      <mesh geometry={nodes.Heart_Full_cell004.geometry} material={materials.Red} position={[-0.535, 0.467, -0.183]} />
      <mesh geometry={nodes.Heart_Full_cell005.geometry} material={materials.Red} position={[-0.202, -0.48, 0.567]} />
      <mesh geometry={nodes.Heart_Full_cell007.geometry} material={materials.Red} position={[-0.788, 0.659, -0.043]} />
      <mesh geometry={nodes.Heart_Full_cell008.geometry} material={materials.Red} position={[-0.479, 0.436, 0.446]} />
      <mesh geometry={nodes.Heart_Full_cell009.geometry} material={materials.Red} position={[0.489, -0.446, 0.651]} />
      <mesh geometry={nodes.Heart_Full_cell010.geometry} material={materials.Red} position={[0.821, -0.617, 0.359]} />
      <mesh geometry={nodes.Heart_Full_cell011.geometry} material={materials.Red} position={[1.066, -0.459, -0.126]} />
      <mesh geometry={nodes.Heart_Full_cell013.geometry} material={materials.Red} position={[-0.173, -0.724, -0.475]} />
      <mesh geometry={nodes.Heart_Full_cell014.geometry} material={materials.Red} position={[0.204, -0.876, 0.42]} />
      <mesh geometry={nodes.Heart_Full_cell015.geometry} material={materials.Red} position={[0.122, -1.15, -0.175]} />
      <mesh geometry={nodes.Heart_Full_cell016.geometry} material={materials.Red} position={[1.115, -0.463, -0.405]} />
      <mesh geometry={nodes.Heart_Full_cell017.geometry} material={materials.Red} position={[1.177, -0.08, 0.094]} />
      <mesh geometry={nodes.Heart_Full_cell018.geometry} material={materials.Red} position={[-0.219, 0.237, -0.316]} />
      <mesh geometry={nodes.Heart_Full_cell019.geometry} material={materials.Red} position={[0.098, 0.21, 0.157]} />
      <mesh geometry={nodes.Heart_Full_cell020.geometry} material={materials.Red} position={[-0.867, 0.258, 0.36]} />
      <mesh geometry={nodes.Heart_Full_cell021.geometry} material={materials.Red} position={[-1.037, 0.269, -0.282]} />
      <mesh geometry={nodes.Heart_Full_cell024.geometry} material={materials.Red} position={[-0.901, -0.326, -0.588]} />
      <mesh geometry={nodes.Heart_Full_cell026.geometry} material={materials.Red} position={[-0.07, 0.442, -0.458]} />
      <mesh geometry={nodes.Heart_Full_cell027.geometry} material={materials.Red} position={[0.321, -0.726, -0.467]} />
      <mesh geometry={nodes.Heart_Full_cell028.geometry} material={materials.Red} position={[1.259, -0.075, -0.322]} />
      <mesh geometry={nodes.Heart_Full_cell029.geometry} material={materials.Red} position={[0.602, -0.364, -0.412]} />
      <mesh geometry={nodes.Heart_Full_cell030.geometry} material={materials.Red} position={[1.181, -0.348, -0.388]} />
      <mesh geometry={nodes.Heart_Full_cell032.geometry} material={materials.Red} position={[0.618, -0.766, -0.004]} />
      <mesh geometry={nodes.Heart_Full_cell033.geometry} material={materials.Red} position={[-0.438, 0.61, 0.2]} />
      <mesh geometry={nodes.Heart_Full_cell034.geometry} material={materials.Red} position={[0.011, -0.256, -0.637]} />
      <mesh geometry={nodes.Heart_Full_cell035.geometry} material={materials.Red} position={[0.543, 0.005, 0.726]} />
      <mesh geometry={nodes.Heart_Full_cell036.geometry} material={materials.Red} position={[0.543, 0.601, 0.062]} />
      <mesh geometry={nodes.Heart_Full_cell037.geometry} material={materials.Red} position={[-1.164, -0.182, 0.285]} />
      <mesh geometry={nodes.Heart_Full_cell038.geometry} material={materials.Red} position={[-0.613, -0.222, 0.553]} />
      <mesh geometry={nodes.Heart_Full_cell039.geometry} material={materials.Red} position={[0.829, 0.107, -0.595]} />
      <mesh geometry={nodes.Heart_Full_cell041.geometry} material={materials.Red} position={[1.079, -0.134, -0.463]} />
      <mesh geometry={nodes.Heart_Full_cell043.geometry} material={materials.Red} position={[0.82, -0.086, 0.42]} />
      <mesh geometry={nodes.Heart_Full_cell044.geometry} material={materials.Red} position={[1.032, 0.296, -0.221]} />
      <mesh geometry={nodes.Heart_Full_cell045.geometry} material={materials.Red} position={[-0.27, 0.59, -0.06]} />
      <mesh geometry={nodes.Heart_Full_cell047.geometry} material={materials.Red} position={[-0.393, -1.016, 0.297]} />
      <mesh geometry={nodes.Heart_Full_cell048.geometry} material={materials.Red} position={[0.118, -1.129, 0.097]} />
      <mesh geometry={nodes.Heart_Full_cell050.geometry} material={materials.Red} position={[1.024, 0.487, 0.163]} />
      <mesh geometry={nodes.Heart_Full_cell051.geometry} material={materials.Red} position={[0.538, 0.302, 0.526]} />
      <mesh geometry={nodes.Heart_Full_cell052.geometry} material={materials.Red} position={[-0.396, -0.775, -0.168]} />
      <mesh geometry={nodes.Heart_Full_cell053.geometry} material={materials.Red} position={[-0.871, -0.668, 0.206]} />
      <mesh geometry={nodes.Heart_Full_cell054.geometry} material={materials.Red} position={[0.238, 0.1, -0.641]} />
      <mesh geometry={nodes.Heart_Full_cell055.geometry} material={materials.Red} position={[-1.067, -0.282, -0.158]} />
      <mesh geometry={nodes.Heart_Full_cell056.geometry} material={materials.Red} position={[0.244, -0.3, 0.577]} />
      <mesh geometry={nodes.Heart_Full_cell057.geometry} material={materials.Red} position={[0.643, 0.464, -0.417]} />
      <mesh geometry={nodes.Heart_Full_cell006.geometry} material={materials.Red} position={[0.128, 0.588, -0.106]} />
      <mesh name="origin" geometry={nodes.origin.geometry} material={materials.Red} position={[0.005, 0.011, -0.025]} rotation={[-Math.PI / 2, 0, 0]} scale={279.869} />
    </group>
  )
}

useGLTF.preload('/heart.glb')

export default Heart